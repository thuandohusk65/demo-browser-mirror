package com.ynsuper.screenmirroring.utilityimport android.content.Contextimport android.content.Context.WINDOW_SERVICEimport android.content.pm.PackageManagerimport android.text.TextUtilsimport android.util.DisplayMetricsimport android.view.LayoutInflaterimport android.view.Viewimport android.view.WindowManagerimport android.widget.Buttonimport android.widget.ImageViewimport android.widget.RatingBarimport android.widget.TextViewimport com.google.android.ads.nativetemplates.NativeTemplateStyleimport com.google.android.ads.nativetemplates.TemplateViewimport com.google.android.gms.ads.AdSizeimport com.google.android.gms.ads.formats.UnifiedNativeAdimport com.google.android.gms.ads.formats.UnifiedNativeAdViewimport com.google.android.gms.ads.nativead.NativeAdimport com.google.android.gms.ads.nativead.NativeAdViewimport com.ynsuper.screenmirroring.Robject UtilAd {    fun googleAdaptiveBannerAdSize(context: Context, width: Float): AdSize {        val display = (context.getSystemService(WINDOW_SERVICE) as WindowManager).defaultDisplay        val outMetrics = DisplayMetrics()        display.getMetrics(outMetrics)        val density = outMetrics.density        var adWidthPixels = width        if (adWidthPixels == 0f) {            adWidthPixels = outMetrics.widthPixels.toFloat()        }        val adWidth = (adWidthPixels / density).toInt()        return AdSize.getCurrentOrientationAnchoredAdaptiveBannerAdSize(context, adWidth)    }    fun checkShowFacebookAds(context: Context): Boolean {//        if (BuildConfig.ads_debug) {//            return false//        }//        return try {//            isFacebookAppInstalled(context) && verifyInstallerIdSourceGooglePlay(context)//        } catch (e: Exception) {//            false//        }        return false    }    fun isFacebookAppInstalled(context: Context): Boolean {        return try {            context.packageManager.getApplicationInfo(packageNameFacebookApp, 0)            true        } catch (e: PackageManager.NameNotFoundException) {            false        }    }    fun verifyInstallerIdSourceGooglePlay(context: Context): Boolean { // A list with valid installers package name        // The package name of the app that has installed your app        val installer =            context.packageManager.getInstallerPackageName(context.packageName)        // true if your app has been downloaded from Play Store        return installer != null && validInstallersByGooglePlay.contains(installer)    }    /**     * @deprecated     *     * @param context     * @param admobNative     * @return     */    fun buildViewNativeGoogleMedium(context: Context, admobNative: UnifiedNativeAd): View {        val layoutInflater: LayoutInflater = LayoutInflater.from(context)        val adViewNativeGoogle = layoutInflater.inflate(            R.layout.ad_native_google_medium, null        )        val styles: NativeTemplateStyle =            NativeTemplateStyle.Builder().build()        val template: TemplateView = adViewNativeGoogle.findViewById(R.id.templateMedium)        template.setStyles(styles)        template.setNativeAd(admobNative)        return adViewNativeGoogle    }    /**     *     *     * @param context     * @param nativeAd     * @return     */    fun buildViewNativeGoogleMedium2(context: Context, nativeAd: NativeAd): View? {        val layoutInflater: LayoutInflater = LayoutInflater.from(context)        val adViewNativeGoogle = layoutInflater.inflate(            R.layout.admob_native_ads, null        )        val adView: NativeAdView = adViewNativeGoogle.findViewById(R.id.native_ad_view)//            // Set the media view.        adView.mediaView = adView.findViewById(R.id.media_view)////            // Set other ad assets.        adView.headlineView = adViewNativeGoogle.findViewById(R.id.primary)        adView.bodyView = adViewNativeGoogle.findViewById(R.id.body)        adView.callToActionView = adViewNativeGoogle.findViewById(R.id.cta)        adView.iconView = adViewNativeGoogle.findViewById(R.id.icon)        adView.starRatingView = adViewNativeGoogle.findViewById(R.id.rating_bar)//            adView.priceView = adView.findViewById(R.id.ad_price)//            adView.storeView = adView.findViewById(R.id.ad_store)        adView.advertiserView = adViewNativeGoogle.findViewById(R.id.ad_advertiser)        if (adHasOnlyStore(nativeAd)) {            adViewNativeGoogle.findViewById<TextView>(R.id.secondary).text = nativeAd.store            adViewNativeGoogle.findViewById<TextView>(R.id.ad_advertiser).visibility= View.GONE        } else if (!TextUtils.isEmpty(nativeAd?.advertiser)) {            adViewNativeGoogle.findViewById<TextView>(R.id.ad_advertiser).text =                nativeAd?.advertiser        } else {            adViewNativeGoogle.findViewById<TextView>(R.id.ad_advertiser).visibility= View.GONE            adViewNativeGoogle.findViewById<TextView>(R.id.ad_advertiser).text = ""        }        // The headline and media content are guaranteed to be in every UnifiednativeAd?.        (adView.headlineView as TextView).text = nativeAd.headline        adView.mediaView.setMediaContent(nativeAd.mediaContent)        // These assets aren't guaranteed to be in every UnifiedNativeAd, so it's important to        // check before trying to display them.        if (nativeAd.body == null) {            adView.bodyView.visibility = View.INVISIBLE        } else {            adView.bodyView.visibility = View.VISIBLE            (adView.bodyView as TextView).text = nativeAd.body        }        if (nativeAd.callToAction == null) {            adView.callToActionView.visibility = View.INVISIBLE        } else {            adView.callToActionView.visibility = View.VISIBLE            (adView.callToActionView as Button).text = nativeAd.callToAction        }//        if (nativeAd.icon == null) {//            adView.iconView.visibility = View.GONE//        } else {//            (adView.iconView as ImageView).setImageDrawable(//                nativeAd.icon.drawable//            )//            adView.iconView.visibility = View.VISIBLE//        }//        if (nativeAd.starRating == null) {//            adView.starRatingView.visibility = View.INVISIBLE//        } else {//            (adView.starRatingView as RatingBar).rating = nativeAd.starRating!!.toFloat()//            adView.starRatingView.visibility = View.VISIBLE//        }        if (nativeAd.advertiser == null) {            adView.advertiserView.visibility = View.GONE        } else {            (adView.advertiserView as TextView).text = nativeAd.advertiser            adView.advertiserView.visibility = View.VISIBLE        }        adView.setNativeAd(nativeAd)        return adViewNativeGoogle    }    private fun adHasOnlyStore(nativeAd: NativeAd): Boolean {        val store = nativeAd.store        val advertiser = nativeAd.advertiser        return !TextUtils.isEmpty(store) && TextUtils.isEmpty(advertiser)    }    val validInstallersByGooglePlay: MutableList<String> =        mutableListOf("com.android.vending", "com.google.android.feedback")    private const val packageNameFacebookApp: String = "com.facebook.katana"}